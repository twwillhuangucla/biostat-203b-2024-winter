---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Chun-Siang Huang and 205111921"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.
```{r setup, message = F}
# Load libraries
library(GGally)
library(gtsummary)
library(ranger)
library(tidyverse)
library(tidymodels)
library(xgboost)
library(doParallel)
library(stacks)
library(keras)

# Load data
mimic_icu_cohort <- readRDS("mimic_icu_cohort.rds")

# Numerical summaries stratified by los_long
# mimic_icu_cohort |>
#   tbl_summary(by = los_long)
```

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
set.seed(203)

# sort
mimic_icu_cohort <- mimic_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id) |>
  select(-subject_id, 
         -hadm_id, 
         -stay_id,
         -intime,
         -outtime,
         -admittime,
         -dischtime,
         -deathtime,
         -admit_provider_id,
         -los,
         -discharge_location,
         -edregtime,
         -edouttime,
         -hospital_expire_flag,
         -anchor_age,
         -anchor_year,
         -anchor_year_group,
         -dod,
         -last_careunit)

mimic_icu_cohort |>
  print(width = Inf)

mimic_icu_cohort |>
  tbl_summary(by = los_long)

# Initial split into test and non-test sets
data_split <- initial_split(
  mimic_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
data_split

data_train <- training(data_split)
dim(data_train)

data_test <- testing(data_split)
dim(data_test)

set.seed(203)

folds <- vfold_cv(data_train, v = 5)
folds
```

```{r}
#Recipe
data_recipe <- recipe(los_long ~ ., data = data_train) |>
  step_impute_mean(all_numeric_predictors()) |>
  step_impute_mode(all_nominal_predictors()) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_numeric_predictors()) |>
  step_normalize(all_numeric_predictors())
```

### Logistic regression with enet regularization
```{r}
#Model
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()

#Workflow
logit_wf <- 
  workflow() |>
  add_recipe(data_recipe) |>
  add_model(logit_mod) |>
  print()

#Tuning
logit_grid <- grid_regular(
  penalty(range = c(-5, 2)), 
  mixture(),
  levels = c(25, 4)
)
```
3. Train and tune the models using the training set.
```{r}
#Cross validation
(logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = logit_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
    )) |>
  system.time()

logit_fit

logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()

logit_fit |>
  show_best("roc_auc")

best_logit <- logit_fit |>
  select_best("roc_auc")
best_logit
```
```{r, eval = F}
logit_fit |> write_rds("./logit_fit.rds")
```

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?

```{r}
#Testing
# Final workflow
final_logit_wf <- logit_wf |>
  finalize_workflow(best_logit)
final_logit_wf

# Fit the whole training set, then predict the test cases
final_logit_fit <- 
  final_logit_wf |>
  last_fit(data_split)
final_logit_fit

final_logit_fit |> 
  collect_metrics()
```

### Boosting
```{r}
library(doParallel)
registerDoParallel(cores = 4)

# Model
boost_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000, 
    tree_depth = tune(), 
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
boost_mod

# Workflow
boost_wf <- 
  workflow() |>
  add_recipe(data_recipe) |>
  add_model(boost_mod)

# Tuning
boost_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 5)
  )
```

```{r}
# Cross validation
set.seed(203)

boost_fit <- boost_wf |>
  tune_grid(
    resamples = folds,
    grid = boost_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
  )

boost_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()

boost_fit |>
  show_best("roc_auc")

best_boost <- boost_fit |>
  select_best("roc_auc")
best_boost
```

```{r, eval = F}
boost_fit |> write_rds("./boost_fit.rds")
```

```{r}
# Testing
# Final workflow
final_boost_wf <- boost_wf |>
  finalize_workflow(best_boost)
final_boost_wf

# Fit the whole training set, then predict the test cases
final_boost_fit <- 
  final_boost_wf |>
  last_fit(data_split)

final_boost_fit |>
  collect_metrics()

stopImplicitCluster()
```
### MLP model

```{r}
# Model
mlp_mod <- 
  mlp(
    mode = "classification",
    hidden_units = tune(),
    dropout = tune(),
    epochs = 15,
  ) |> 
  set_engine("keras", verbose = 0)
mlp_mod

# Workflow
mlp_wf <- 
  workflow() |>
  add_recipe(data_recipe) |>
  add_model(mlp_mod)
mlp_wf

# Tuning
mlp_grid <- grid_regular(
  hidden_units(range = c(1, 8)),
  dropout(range = c(0, 0.2)),
  levels = c(3,3)
  )
```

```{r}
# Cross validation
set.seed(203)

mlp_fit <- mlp_wf |>
  tune_grid(
    resamples = folds,
    grid = mlp_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
  )

mlp_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = dropout, y = mean, color = factor(hidden_units))) +
  geom_point() +
  labs(x = "Dropout Rate", y = "CV AUC")
  
mlp_fit |>
  show_best("roc_auc")

best_mlp <- mlp_fit |>
  select_best("roc_auc")
best_mlp
```

```{r, eval = F}
mlp_fit |> write_rds("./mlp_fit.rds")
```

```{r}
# Testing
# Final workflow
final_mlp_wf <- mlp_wf |>
  finalize_workflow(best_mlp)

# Fit the whole training set, then predict the test cases
final_mlp_fit <- 
  final_mlp_wf |>
  last_fit(data_split)

final_mlp_fit |>
  collect_metrics()
```

### Model stacking
```{r}
# Model
stack_mod <- 
  stacks() |> 
  add_candidates(logit_fit) |>
  add_candidates(boost_fit) |>
  add_candidates(mlp_fit) |>
  blend_predictions(
    penalty = 10^(-5:-1),
    metrics = c("roc_auc")
    ) |>
  fit_members()

# Visualize
autoplot(stack_mod, type = "members")

autoplot(stack_mod, type = "weights")

# Collect parameters
collect_parameters(stack_mod, "rf_res")
```

```{r, eval = F}
stack_mod |> write_rds("./stack_mod.rds")
```

```{r}
#Final classification
stack_pred <- 
  bind_cols(
    predict(stack_mod, 
            new_data = data_test, 
            type = "prob")) |>
  print(width = Inf)

yardstick::roc_auc(
  stack_pred,
  truth = los_long,
  contains(".pred_No")
  )

stack_pred <-
  data_test |>
  select(los_long) |>
  bind_cols(
    predict(stack_mod,
            data_test,
            type = "class",
            members = T
    )
  ) |>
  print(width = Inf)
```





